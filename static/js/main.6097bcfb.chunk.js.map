{"version":3,"sources":["components/header.tsx","components/common/CompanySelect.tsx","components/common/SizeSelct.tsx","components/Image.tsx","components/Upload.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["HeaderText","styled","h1","Header","animatedComponents","makeAnimated","Overview","div","CompanySelectStyle","Text","options","value","label","companyCallback","handleSubmit","useForm","useState","selectedCompanyOptions","setSelectedCompanyOptions","onSubmit","event","closeMenuOnSelect","components","isMulti","onChange","SizeSelectStyle","sizeOptions","imageCallback","selectedSizeOptions","setSelectedSizeOptions","facebookSizes","facebook","EventImage","width","height","ProfilePhoto","CoverPhoto","Img","img","companyData","file","imageSizeData","im","setIm","imageArray","createImage","company","sizeImage","imageType","imageFile","Resizer","imageFileResizer","uri","length","console","log","push","imageList","map","image","src","UploadInput","input","UploadButton","fileCallback","setFile","e","target","files","type","accept","Layout","Center","App","setCompanyData","setImageSizeData","fileData","setFileData","Upload","data","CompanySelect","Image","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.6097bcfb.chunk.js","sourcesContent":["import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst HeaderText = styled.h1`\r\n  text-align: center;\r\n`;\r\n\r\nfunction Header() {\r\n  return <HeaderText>Marketing Image Resizer</HeaderText>;\r\n}\r\n\r\nexport default Header;\r\n","import React, { useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport Select from \"react-select\";\r\nimport { useForm } from \"react-hook-form\";\r\n\r\nimport makeAnimated from \"react-select/animated\";\r\nimport \"./button.css\";\r\n\r\nconst animatedComponents = makeAnimated();\r\n\r\ninterface ICompanyProps {\r\n  companyCallback: Function;\r\n}\r\n\r\nconst Overview = styled.div``;\r\n\r\nconst CompanySelectStyle = styled.div`\r\n  width: 300px;\r\n  padding: 20px;\r\n`;\r\nconst Text = styled.div`\r\n  font-weigth: bold;\r\n  font-size: 20px;\r\n  padding-bottom: 10px;\r\n`;\r\nconst options = [\r\n  { value: \"facebook\", label: \"Facebook\" },\r\n  { value: \"Twitter\", label: \"Twitter\" },\r\n  { value: \"Reddit\", label: \"Reddit\" },\r\n  { value: \"Instagram\", label: \"Instagram\" },\r\n];\r\nexport default ({ companyCallback }: ICompanyProps) => {\r\n  const { handleSubmit } = useForm();\r\n  const [selectedCompanyOptions, setSelectedCompanyOptions] = useState([]);\r\n\r\n  const handleChange = (options: any) => {\r\n    setSelectedCompanyOptions(options);\r\n  };\r\n\r\n  companyCallback(selectedCompanyOptions);\r\n\r\n  const test = (event: any) => {};\r\n  return (\r\n    <Overview>\r\n      <CompanySelectStyle>\r\n        <Text>Pick your platform(s)</Text>\r\n        <form onSubmit={handleSubmit(test)}>\r\n          <Select\r\n            closeMenuOnSelect={false}\r\n            components={animatedComponents}\r\n            isMulti\r\n            options={options}\r\n            onChange={handleChange}\r\n          />\r\n        </form>\r\n      </CompanySelectStyle>\r\n    </Overview>\r\n  );\r\n};\r\n\r\n// for (const {\r\n//   type: type,\r\n//   size: { width: width, height: height },\r\n// } of facebookSizes) {\r\n\r\n// }\r\n","import React, { useState } from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport styled from \"styled-components\";\r\nimport Select from \"react-select\";\r\nimport makeAnimated from \"react-select/animated\";\r\nimport \"./button.css\";\r\n\r\nconst animatedComponents = makeAnimated();\r\n\r\ninterface ISizeProps {\r\n  imageCallback: Function;\r\n}\r\n\r\nconst Overview = styled.div``;\r\n\r\nconst SizeSelectStyle = styled.div`\r\n  width: 300px;\r\n  padding: 20px;\r\n`;\r\nconst Text = styled.div`\r\n  font-weigth: bold;\r\n  font-size: 20px;\r\n  padding-bottom: 10px;\r\n`;\r\nconst sizeOptions = [\r\n  { value: \"EventImage\", label: \"Event Image\" },\r\n  { value: \"ProfilePhoto\", label: \"Profile Photo\" },\r\n  { value: \"CoverPhoto\", label: \"CoverPhoto\" },\r\n];\r\n\r\nexport default ({ imageCallback }: ISizeProps) => {\r\n  const [selectedSizeOptions, setSelectedSizeOptions] = useState([]);\r\n  const { handleSubmit } = useForm();\r\n\r\n  const handleChange = (options: any) => {\r\n    setSelectedSizeOptions(options);\r\n  };\r\n\r\n  imageCallback(selectedSizeOptions);\r\n  const test = (event: any) => {};\r\n  return (\r\n    <Overview>\r\n      <SizeSelectStyle>\r\n        <Text>Pick your image size(s)</Text>\r\n        <form onSubmit={handleSubmit(test)}>\r\n          <Select\r\n            closeMenuOnSelect={false}\r\n            components={animatedComponents}\r\n            isMulti\r\n            options={sizeOptions}\r\n            onChange={handleChange}\r\n          />\r\n        </form>\r\n      </SizeSelectStyle>\r\n    </Overview>\r\n  );\r\n};\r\n","import React, { useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport Resizer from \"react-image-file-resizer\";\r\n\r\nconst facebookSizes: { [key: string]: any } = {\r\n  facebook: {\r\n    EventImage: { width: 1920, height: 1080 },\r\n    ProfilePhoto: { width: 1920, height: 1080 },\r\n    CoverPhoto: { width: 1920, height: 1080 },\r\n  },\r\n};\r\n\r\nconst Overview = styled.div`\r\n  padding-bottom: 20px;\r\n`;\r\nconst Img = styled.img``;\r\ninterface IImageProps {\r\n  companyData: any;\r\n  imageSizeData: any;\r\n  file: any;\r\n}\r\n\r\nexport default ({ companyData, file, imageSizeData }: IImageProps) => {\r\n  const [im, setIm] = useState([]);\r\n  let imageArray: Array<any> = [];\r\n  function createImage(event: string, company: string) {\r\n    let selectedWidth = facebookSizes[company][event].width;\r\n    let selectedHeight = facebookSizes[company][event].height;\r\n\r\n    return [selectedWidth, selectedHeight];\r\n  }\r\n\r\n  function sizeImage(\r\n    imageType: string,\r\n    imageFile: any,\r\n    height: any,\r\n    width: any\r\n  ) {\r\n    Resizer.imageFileResizer(\r\n      imageFile,\r\n      height,\r\n      width,\r\n      \"JPEG\",\r\n      100,\r\n      0,\r\n      (uri: any) => {\r\n        setIm(uri);\r\n      },\r\n      \"base64\"\r\n    );\r\n  }\r\n\r\n  if (companyData === null || companyData.length < 1) {\r\n  } else if (imageSizeData === null || imageSizeData.length < 1) {\r\n  } else {\r\n    for (const { value: company } of companyData) {\r\n      for (const { value: imageType } of imageSizeData) {\r\n        console.log(createImage(imageType, company));\r\n        const [width, height] = createImage(imageType, company);\r\n        sizeImage(imageType, file, height, width);\r\n        imageArray.push(im);\r\n      }\r\n    }\r\n  }\r\n\r\n  const imageList = imageArray.map((image) => <Img src={image} />);\r\n  return <Overview>{imageList}</Overview>;\r\n};\r\n","import React, { useState } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\ninterface IFileProps {\r\n  fileCallback: Function;\r\n}\r\n\r\nconst Overview = styled.div`\r\n  text-align: center;\r\n  padding-bottom: 20px;\r\n`;\r\nconst UploadInput = styled.input`\r\n  display: inline-block;\r\n  padding-left: 10px;\r\n`;\r\nconst UploadButton = styled.div`\r\n  display: inline-block;\r\n`;\r\nexport default ({ fileCallback }: IFileProps) => {\r\n  const [file, setFile] = useState(null);\r\n  const handleChange = (e: any) => {\r\n    setFile(e.target.files[0]);\r\n  };\r\n\r\n  fileCallback(file);\r\n  return (\r\n    <Overview>\r\n      <UploadButton>Upload image: </UploadButton>\r\n      <UploadInput onChange={handleChange} type=\"file\" accept=\"image/*\" />\r\n    </Overview>\r\n  );\r\n};\r\n","import React, { useState } from \"react\";\r\nimport \"./App.css\";\r\n\r\nimport Header from \"./components/header\";\r\nimport CompanySelect from \"./components/common/CompanySelect\";\r\nimport SizeSelect from \"./components/common/SizeSelct\";\r\nimport ImageThings from \"./components/Image\";\r\nimport Upload from \"./components/Upload\";\r\n// import Button from \"./components/common/Button\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Layout = styled.div`\r\n  padding: 20px;\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\nconst Center = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n`;\r\nfunction App() {\r\n  const [companyData, setCompanyData] = useState([]);\r\n  const [imageSizeData, setImageSizeData] = useState([]);\r\n  const [fileData, setFileData] = useState([]);\r\n\r\n  const companyDataCallback = (data: any) => {\r\n    setCompanyData(data);\r\n  };\r\n  const imageDataCallback = (data: any) => {\r\n    setImageSizeData(data);\r\n  };\r\n  const fileCallback = (data: any) => {\r\n    setFileData(data);\r\n  };\r\n  return (\r\n    <div>\r\n      <Header />\r\n\r\n      <Center>\r\n        <Layout>\r\n          <Upload fileCallback={fileCallback} />\r\n          <CompanySelect companyCallback={companyDataCallback} />\r\n          <SizeSelect imageCallback={imageDataCallback} />\r\n          <ImageThings\r\n            file={fileData}\r\n            companyData={companyData}\r\n            imageSizeData={imageSizeData}\r\n          />\r\n        </Layout>\r\n      </Center>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}